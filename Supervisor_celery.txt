********************************************************* install redis *********************************************************
first install 
$ pip install celery
$ pip install redis
$ sudo apt-get install redis-server

******************************************************** now configure the redis ****************************************
sudo nano /etc/redis/redis.conf

/// 
now search using ctrl+w and search for "supervised"
paste > supervised systemd

sudo systemctl restart redis-server.service
sudo systemctl enable redis-server.service
sudo reboot
sudo systemctl status redis-server.service

*********************************************************step 2*********************************************************
add to settings.py 

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Karachi'

*********************************************************step 3*********************************************************
sudo apt-get install supervisor
sudo nano /etc/supervisor/conf.d/celery_worker.conf

*********************************************************step4********************************************************* 
copy and paste
; ==========================
;  celery worker supervisor
; ==========================

; the name of your supervisord program
[program:celery-default]

; Set full path to celery program if using virtualenv
command=/home/sumit/env/bin/celery -A project worker --loglevel=INFO

; The directory to your Django project
directory=/home/sumit/testing/project

; If supervisord is run as the root user, switch users to this UNIX user account
; before doing any processing.
user=sumit

; Supervisor will start as many instances of this program as named by numprocs
numprocs=1

; Put process stdout output in this file
;stdout_logfile=/var/log/celery_worker.log

; Put process stderr output in this file
;stderr_logfile=/var/log/celery_worker.log

; If true, this program will start automatically when supervisord is started
autostart=true

; May be one of false, unexpected, or true. If false, the process will never
; be autorestarted. If unexpected, the process will be restart when the program
; exits with an exit code that is not one of the exit codes associated with this
; process’ configuration (see exitcodes). If true, the process will be
; unconditionally restarted when it exits, without regard to its exit code.
autorestart=true

; May be one of false, unexpected, or true. If false, the process will never
; be autorestarted. If unexpected, the process will be restart when the program
; exits with an exit code that is not one of the exit codes associated with this
; process’ configuration (see exitcodes). If true, the process will be
; unconditionally restarted when it exits, without regard to its exit code.
autorestart=true

; The total number of seconds which the program needs to stay running after
; a startup to consider the start successful.
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if your broker is supervised, set its priority higher
; so it starts first
priority=998


********************************************************* step 5 *********************************************************
useful commands 

sudo systemctl status supervisor

sudo supervisorctl reread

sudo supervisorctl update

$ sudo supervisorctl stop celery-default(celery app name)
$ sudo supervisorctl start celery-default
$ sudo supervisorctl status celery-default

sudo supervisorctl
supervisor> start app_name
supervisor> status
supervisor> quit

******************************************************** if redis not working *************************
Stop the Redis service:
sudo systemctl stop redis-server.service

Remove the Redis packages:
sudo apt-get remove --purge redis-server redis-tools

Delete Redis configuration files and data:
sudo rm -rf /etc/redis /var/lib/redis

Update the package manager:
sudo apt-get update

Install Redis:
sudo apt-get install redis-server

After the installation is complete, start the Redis service:
sudo systemctl start redis-server.service

Verify the status of the Redis service to ensure it is running without any errors:
sudo systemctl status redis-server.service
